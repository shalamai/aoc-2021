package main

import (
	"fmt"
	"math"
	"sort"
)

var input0 = []int {16,1,2,0,4,2,7,1,2,14,}

var input1 = []int {
	0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,5,5,5,6,6,7,7,7,8,8,9,9,9,10,10,10,10,10,10,11,11,12,12,13,13,13,14,14,14,15,16,17,17,19,19,19,20,20,22,22,23,23,24,24,24,25,25,25,25,26,26,26,28,28,28,28,29,29,29,30,30,30,30,31,32,32,32,32,32,32,32,32,33,34,35,35,35,35,36,37,37,37,37,38,38,39,40,41,41,44,44,44,45,45,46,46,46,46,47,47,47,47,48,48,49,50,51,51,51,51,52,52,53,54,54,55,57,57,57,57,58,60,60,60,61,63,63,64,65,65,65,65,65,65,65,66,66,67,67,67,69,69,70,70,70,71,72,73,75,75,76,76,77,79,79,79,80,80,81,81,82,83,84,85,85,86,86,86,86,87,87,89,89,89,90,90,91,91,92,92,93,94,94,95,96,96,96,97,97,98,98,99,99,99,100,100,101,101,101,101,103,104,104,104,105,105,105,107,107,108,109,109,109,109,110,110,110,110,111,111,111,112,112,112,112,113,113,114,114,115,115,115,115,116,116,117,117,118,118,118,119,119,119,123,123,124,125,125,128,128,129,129,129,130,130,130,130,131,131,132,133,133,134,137,137,137,138,138,138,140,141,141,143,143,143,143,144,145,145,147,148,149,149,153,154,155,156,158,159,159,159,159,160,161,162,163,163,163,164,165,166,166,168,168,168,168,168,169,169,169,169,170,173,173,174,175,175,175,175,176,176,178,181,181,182,182,182,187,190,190,190,193,193,193,196,196,196,198,198,202,203,204,205,206,206,207,207,210,212,212,214,220,222,222,223,225,226,226,227,227,228,229,229,230,231,233,233,234,234,237,237,239,239,239,241,242,243,244,246,248,248,248,251,251,254,254,257,258,258,259,259,259,259,260,261,262,262,265,266,268,271,272,275,276,278,283,284,284,286,287,292,294,294,296,298,298,299,300,301,302,303,304,305,306,310,311,312,312,313,313,314,315,315,318,318,320,321,321,321,322,322,324,325,327,330,331,332,334,336,339,340,341,344,345,346,346,347,347,352,356,357,357,357,358,358,359,360,360,360,361,361,362,362,364,365,366,367,369,371,371,372,375,376,376,379,379,380,382,384,387,387,389,389,389,390,390,391,394,395,396,397,400,403,405,406,407,408,410,412,412,413,417,418,419,420,421,422,423,424,426,426,428,429,432,433,435,436,437,440,442,443,443,444,445,447,447,448,449,450,451,453,456,456,458,458,459,460,460,462,462,462,465,465,466,466,466,467,468,470,473,473,475,475,478,478,478,478,479,479,479,482,487,487,489,489,493,496,498,500,501,507,508,512,512,512,512,514,514,520,522,525,526,530,530,533,536,537,539,540,543,543,544,545,546,548,551,551,552,557,557,557,560,564,565,566,567,571,571,573,576,576,578,584,585,585,588,590,590,594,594,596,596,597,598,601,602,603,612,616,617,618,618,623,624,627,628,632,636,638,640,644,646,646,647,648,648,650,651,652,652,654,656,657,658,661,663,665,667,676,678,681,681,682,685,685,686,689,691,692,694,694,694,701,702,703,703,703,712,714,714,716,718,719,723,723,733,738,741,744,747,748,752,757,758,759,760,763,768,769,770,776,780,784,785,786,786,796,797,798,798,805,807,809,810,811,814,818,821,821,822,822,825,825,825,826,829,830,831,833,834,836,841,842,844,845,845,846,848,851,851,852,854,857,858,858,858,862,863,863,870,877,878,878,879,883,883,885,890,891,895,895,896,897,898,900,902,903,905,906,907,908,909,912,913,913,914,919,919,919,922,927,928,930,932,936,939,941,941,946,946,946,947,950,951,952,953,958,959,959,962,968,968,969,972,975,975,994,1001,1003,1004,1005,1007,1008,1014,1015,1017,1019,1021,1021,1022,1032,1038,1052,1054,1058,1058,1061,1062,1065,1068,1069,1070,1077,1085,1086,1087,1087,1088,1089,1097,1097,1097,1101,1102,1106,1108,1109,1113,1114,1116,1118,1124,1131,1132,1138,1144,1144,1147,1149,1151,1152,1155,1161,1164,1170,1174,1177,1192,1202,1209,1210,1214,1217,1217,1217,1228,1238,1240,1241,1253,1256,1256,1257,1275,1275,1280,1287,1299,1314,1318,1319,1321,1327,1345,1346,1347,1354,1362,1364,1369,1369,1370,1374,1380,1382,1388,1391,1393,1396,1396,1398,1398,1401,1411,1423,1431,1433,1442,1444,1458,1458,1467,1481,1488,1490,1512,1513,1519,1523,1529,1539,1539,1569,1571,1578,1593,1594,1594,1604,1605,1617,1617,1631,1663,1684,1699,1703,1704,1709,1710,1712,1719,1727,1735,1737,1745,1776,1829,1846,1862,
}


func main() {
	// calculate(input1)
	// fmt.Println(manualCalc(input0, 2))
	// crabs, _ := getStats(input0)
	// fmt.Println(center(input1))
	// count(input1)
	// fmt.Println(factorialAddition(2))
	bs(input1)
	fmt.Println(manualCalc2(input1, 490))
}


func bs(input []int) {
	sort.Ints(input)
	
	l, r := 0, len(input) - 1
	i := 0
	for true {
		i = l + ((r - l) / 2)

		a := manualCalc2(input, i)
		
		al := manualCalc2(input, i - 1)
		ar := manualCalc2(input, i + 1)

		if a < al && a < ar {
			break
		} else if a > al {
			r = i
		} else {
			l = i
		}
	}
	
	fmt.Println(i)
}


func count(input []int) {
	min := manualCalc(input, 0)
	minI := 0
	crabs, _ := getStats(input)
	for i := 1; i < len(crabs); i++ {
		m := manualCalc(input, i)
		fmt.Println(m)
		if m < min {
			min = m
			minI = i
		}
	}
	fmt.Println(min)
	fmt.Println(minI)
}

func count2(input []int) {
	min := manualCalc2(input, 0)
	minI := 0
	crabs, _ := getStats(input)
	for i := 1; i < len(crabs); i++ {
		m := manualCalc2(input, i)
		if m < min {
			min = m
			minI = i
		}
	}
	fmt.Println(min)
	fmt.Println(minI)
}


func center(input []int) int {
	acc := 0
	for _, n := range input {
		acc += n
	}

	return acc / len(input)
}


func manualCalc(input []int, n int) int {
	acc := 0
	for _, i := range input {
		acc += int(math.Abs(float64(n - i)))
	}

	return acc
}

func manualCalc2(input []int, n int) int {
	acc := 0
	for _, i := range input {
		acc += factorialAddition(int(math.Abs(float64(n - i))))
	}

	return acc
}

func factorialAddition(n int) int {
	acc := 0
	for i := 1; i <= n; i++ {
		acc += i
	}

	return acc
}

func calculate(input []int) int {
	crabs, leftPrice := getStats(input)

	bestPosition := 0
	bestMoves := 0
	for i := 1; i < len(crabs); i++ {
		
		priceToTheBest := bestMoves + (i - bestPosition) * crabs[i]
		priceToTheCurrent := leftPrice[i]
		fmt.Printf("[%v], %v, %v\n", bestPosition, priceToTheBest, priceToTheCurrent)
		if priceToTheCurrent <= priceToTheBest {
			bestPosition = i
			bestMoves = priceToTheCurrent
		} else {
			bestMoves = priceToTheBest
		}
	}


	fmt.Println(bestMoves)
	fmt.Println(bestPosition)
	return 0
}


func getStats(input []int) (crabs []int, leftPrice[]int) {
	crabs, leftPrice = make([]int, getMax(input) + 1), make([]int, getMax(input) + 1)
	for _, i := range input {
		crabs[i]++
	}

	crabsToTheLeft := crabs[0]
	for i := 1; i < len(crabs); i++ {
		leftPrice[i] = leftPrice[i - 1] +  crabsToTheLeft
		crabsToTheLeft += crabs[i]
	}

	return
}

func getMax(arr []int) int {
	max := arr[0]
	for i := 1; i < len(arr); i++ {
		if arr[i] > max {
			max = arr[i]
		}
	}
	return max
}